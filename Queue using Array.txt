# B:QUEUES:
#B-1:Array implementation of QUEUES
#B-1-a:Dyanmic length

class QueueEmptyError(Exception):
    pass
class Queue:
    def __init__(self):
        self.item=[]
    def is_empty(self):
        return self.item==[]
    def size(self):
        return len(self.item)
    def enqueue(self,data):
        self.item.append(data)
    def dequeue(self):
        if self.is_empty():
            raise QueueEmptyError("Queqe is empty!!")
        return self.item.pop(0)
    def peek(self):
        if self.is_empty():
            raise QueueEmptyError("Queue is empty!!")
        return self.item[0]
    def display(self):
        print(self.item)

if __name__=="__main__":
    queue=Queue()

    while True:
        print("1.Enqueue")
        print("2.Dequeue")
        print("3.Size")
        print("4.Peek")
        print("5.Display")
        print("6.Quit")

        choice=int(input("Enter a choice: "))
        if(choice==1):
            data=int(input("Enter the element: "))
            queue.enqueue(data)
        elif(choice==2):
            popped=queue.dequeue()
            print("Delete elements is: ",popped)
        elif(choice==3):
            s=queue.size()
            print("Size is: ",s)
        elif(choice==4):
            p=queue.peek()
            print("Front is at: ",p)
        elif(choice==5):
            queue.display()
        elif(choice==6):
            break
        else:
            print("Invalid Choice!!")
        print()


#B-1-b:Efficient implementation for queue:

class QueueEmptyError(Exception):
    pass
class Queue:
    def __init__(self):
        self.item=[]
        self.front=0

    def is_empty(self):
        return self.front==len(self.item)

    def size(self):
        return len(self.item)-self.front

    def enqueue(self,data):
        self.item.append(data)

    def dequeue(self):
        if self.is_empty():
            raise QueueEmptyError("Queue is empty..")
        f=self.item[self.front]
        self.item[self.front]=None
        self.front+=1
        return f

    def peek(self):
        if self.is_empty():
            raise QueueEmptyError("Empty!")
        return self.item[self.front]

    def display(self):
        print(self.item)

if __name__=="__main__":
    queue=Queue()

    while True:
        print("1.Enqueue")
        print("2.Dequeue")
        print("3.Size")
        print("4.Peek")
        print("5.Display")
        print("6.Quit")

        choice=int(input("Enter a choice: "))
        if(choice==1):
            data=int(input("Enter the element: "))
            queue.enqueue(data)
        elif(choice==2):
            popped=queue.dequeue()
            print("Delete elements is: ",popped)
        elif(choice==3):
            s=queue.size()
            print("Size is: ",s)
        elif(choice==4):
            p=queue.peek()
            print("Front is at: ",p)
        elif(choice==5):
            queue.display()
        elif(choice==6):
            break
        else:
            print("Invalid Choice!!")
        print()